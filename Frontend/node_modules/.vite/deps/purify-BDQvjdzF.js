import { __commonJS } from "./chunk-Cas2H8Ax.js";

//#region node_modules/dompurify/dist/purify.js
var require_purify = /* @__PURE__ */ __commonJS({ "node_modules/dompurify/dist/purify.js": ((exports, module) => {
	/*! @license DOMPurify 2.5.8 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.5.8/LICENSE */
	(function(global, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.DOMPurify = factory());
	})(exports, (function() {
		function _typeof(obj) {
			"@babel/helpers - typeof";
			return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj$1) {
				return typeof obj$1;
			} : function(obj$1) {
				return obj$1 && "function" == typeof Symbol && obj$1.constructor === Symbol && obj$1 !== Symbol.prototype ? "symbol" : typeof obj$1;
			}, _typeof(obj);
		}
		function _setPrototypeOf(o, p) {
			_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf$1(o$1, p$1) {
				o$1.__proto__ = p$1;
				return o$1;
			};
			return _setPrototypeOf(o, p);
		}
		function _isNativeReflectConstruct() {
			if (typeof Reflect === "undefined" || !Reflect.construct) return false;
			if (Reflect.construct.sham) return false;
			if (typeof Proxy === "function") return true;
			try {
				Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
				return true;
			} catch (e) {
				return false;
			}
		}
		function _construct(Parent, args, Class) {
			if (_isNativeReflectConstruct()) _construct = Reflect.construct;
			else _construct = function _construct$1(Parent$1, args$1, Class$1) {
				var a = [null];
				a.push.apply(a, args$1);
				var instance = new (Function.bind.apply(Parent$1, a))();
				if (Class$1) _setPrototypeOf(instance, Class$1.prototype);
				return instance;
			};
			return _construct.apply(null, arguments);
		}
		function _toConsumableArray(arr) {
			return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
		}
		function _arrayWithoutHoles(arr) {
			if (Array.isArray(arr)) return _arrayLikeToArray(arr);
		}
		function _iterableToArray(iter) {
			if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
		}
		function _unsupportedIterableToArray(o, minLen) {
			if (!o) return;
			if (typeof o === "string") return _arrayLikeToArray(o, minLen);
			var n = Object.prototype.toString.call(o).slice(8, -1);
			if (n === "Object" && o.constructor) n = o.constructor.name;
			if (n === "Map" || n === "Set") return Array.from(o);
			if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
		}
		function _arrayLikeToArray(arr, len) {
			if (len == null || len > arr.length) len = arr.length;
			for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
			return arr2;
		}
		function _nonIterableSpread() {
			throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		}
		var hasOwnProperty = Object.hasOwnProperty, setPrototypeOf = Object.setPrototypeOf, isFrozen = Object.isFrozen, getPrototypeOf = Object.getPrototypeOf, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
		var freeze = Object.freeze, seal = Object.seal, create = Object.create;
		var _ref = typeof Reflect !== "undefined" && Reflect, apply = _ref.apply, construct = _ref.construct;
		if (!apply) apply = function apply$1(fun, thisValue, args) {
			return fun.apply(thisValue, args);
		};
		if (!freeze) freeze = function freeze$1(x) {
			return x;
		};
		if (!seal) seal = function seal$1(x) {
			return x;
		};
		if (!construct) construct = function construct$1(Func, args) {
			return _construct(Func, _toConsumableArray(args));
		};
		var arrayForEach = unapply(Array.prototype.forEach);
		var arrayPop = unapply(Array.prototype.pop);
		var arrayPush = unapply(Array.prototype.push);
		var stringToLowerCase = unapply(String.prototype.toLowerCase);
		var stringToString = unapply(String.prototype.toString);
		var stringMatch = unapply(String.prototype.match);
		var stringReplace = unapply(String.prototype.replace);
		var stringIndexOf = unapply(String.prototype.indexOf);
		var stringTrim = unapply(String.prototype.trim);
		var regExpTest = unapply(RegExp.prototype.test);
		var typeErrorCreate = unconstruct(TypeError);
		function unapply(func) {
			return function(thisArg) {
				for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key];
				return apply(func, thisArg, args);
			};
		}
		function unconstruct(func) {
			return function() {
				for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];
				return construct(func, args);
			};
		}
		function addToSet(set, array, transformCaseFunc) {
			var _transformCaseFunc;
			transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;
			if (setPrototypeOf) setPrototypeOf(set, null);
			var l = array.length;
			while (l--) {
				var element = array[l];
				if (typeof element === "string") {
					var lcElement = transformCaseFunc(element);
					if (lcElement !== element) {
						if (!isFrozen(array)) array[l] = lcElement;
						element = lcElement;
					}
				}
				set[element] = true;
			}
			return set;
		}
		function clone(object) {
			var newObject = create(null);
			var property;
			for (property in object) if (apply(hasOwnProperty, object, [property]) === true) newObject[property] = object[property];
			return newObject;
		}
		function lookupGetter(object, prop) {
			while (object !== null) {
				var desc = getOwnPropertyDescriptor(object, prop);
				if (desc) {
					if (desc.get) return unapply(desc.get);
					if (typeof desc.value === "function") return unapply(desc.value);
				}
				object = getPrototypeOf(object);
			}
			function fallbackValue(element) {
				console.warn("fallback value for", element);
				return null;
			}
			return fallbackValue;
		}
		var html$1 = freeze([
			"a",
			"abbr",
			"acronym",
			"address",
			"area",
			"article",
			"aside",
			"audio",
			"b",
			"bdi",
			"bdo",
			"big",
			"blink",
			"blockquote",
			"body",
			"br",
			"button",
			"canvas",
			"caption",
			"center",
			"cite",
			"code",
			"col",
			"colgroup",
			"content",
			"data",
			"datalist",
			"dd",
			"decorator",
			"del",
			"details",
			"dfn",
			"dialog",
			"dir",
			"div",
			"dl",
			"dt",
			"element",
			"em",
			"fieldset",
			"figcaption",
			"figure",
			"font",
			"footer",
			"form",
			"h1",
			"h2",
			"h3",
			"h4",
			"h5",
			"h6",
			"head",
			"header",
			"hgroup",
			"hr",
			"html",
			"i",
			"img",
			"input",
			"ins",
			"kbd",
			"label",
			"legend",
			"li",
			"main",
			"map",
			"mark",
			"marquee",
			"menu",
			"menuitem",
			"meter",
			"nav",
			"nobr",
			"ol",
			"optgroup",
			"option",
			"output",
			"p",
			"picture",
			"pre",
			"progress",
			"q",
			"rp",
			"rt",
			"ruby",
			"s",
			"samp",
			"section",
			"select",
			"shadow",
			"small",
			"source",
			"spacer",
			"span",
			"strike",
			"strong",
			"style",
			"sub",
			"summary",
			"sup",
			"table",
			"tbody",
			"td",
			"template",
			"textarea",
			"tfoot",
			"th",
			"thead",
			"time",
			"tr",
			"track",
			"tt",
			"u",
			"ul",
			"var",
			"video",
			"wbr"
		]);
		var svg$1 = freeze([
			"svg",
			"a",
			"altglyph",
			"altglyphdef",
			"altglyphitem",
			"animatecolor",
			"animatemotion",
			"animatetransform",
			"circle",
			"clippath",
			"defs",
			"desc",
			"ellipse",
			"filter",
			"font",
			"g",
			"glyph",
			"glyphref",
			"hkern",
			"image",
			"line",
			"lineargradient",
			"marker",
			"mask",
			"metadata",
			"mpath",
			"path",
			"pattern",
			"polygon",
			"polyline",
			"radialgradient",
			"rect",
			"stop",
			"style",
			"switch",
			"symbol",
			"text",
			"textpath",
			"title",
			"tref",
			"tspan",
			"view",
			"vkern"
		]);
		var svgFilters = freeze([
			"feBlend",
			"feColorMatrix",
			"feComponentTransfer",
			"feComposite",
			"feConvolveMatrix",
			"feDiffuseLighting",
			"feDisplacementMap",
			"feDistantLight",
			"feFlood",
			"feFuncA",
			"feFuncB",
			"feFuncG",
			"feFuncR",
			"feGaussianBlur",
			"feImage",
			"feMerge",
			"feMergeNode",
			"feMorphology",
			"feOffset",
			"fePointLight",
			"feSpecularLighting",
			"feSpotLight",
			"feTile",
			"feTurbulence"
		]);
		var svgDisallowed = freeze([
			"animate",
			"color-profile",
			"cursor",
			"discard",
			"fedropshadow",
			"font-face",
			"font-face-format",
			"font-face-name",
			"font-face-src",
			"font-face-uri",
			"foreignobject",
			"hatch",
			"hatchpath",
			"mesh",
			"meshgradient",
			"meshpatch",
			"meshrow",
			"missing-glyph",
			"script",
			"set",
			"solidcolor",
			"unknown",
			"use"
		]);
		var mathMl$1 = freeze([
			"math",
			"menclose",
			"merror",
			"mfenced",
			"mfrac",
			"mglyph",
			"mi",
			"mlabeledtr",
			"mmultiscripts",
			"mn",
			"mo",
			"mover",
			"mpadded",
			"mphantom",
			"mroot",
			"mrow",
			"ms",
			"mspace",
			"msqrt",
			"mstyle",
			"msub",
			"msup",
			"msubsup",
			"mtable",
			"mtd",
			"mtext",
			"mtr",
			"munder",
			"munderover"
		]);
		var mathMlDisallowed = freeze([
			"maction",
			"maligngroup",
			"malignmark",
			"mlongdiv",
			"mscarries",
			"mscarry",
			"msgroup",
			"mstack",
			"msline",
			"msrow",
			"semantics",
			"annotation",
			"annotation-xml",
			"mprescripts",
			"none"
		]);
		var text = freeze(["#text"]);
		var html = freeze([
			"accept",
			"action",
			"align",
			"alt",
			"autocapitalize",
			"autocomplete",
			"autopictureinpicture",
			"autoplay",
			"background",
			"bgcolor",
			"border",
			"capture",
			"cellpadding",
			"cellspacing",
			"checked",
			"cite",
			"class",
			"clear",
			"color",
			"cols",
			"colspan",
			"controls",
			"controlslist",
			"coords",
			"crossorigin",
			"datetime",
			"decoding",
			"default",
			"dir",
			"disabled",
			"disablepictureinpicture",
			"disableremoteplayback",
			"download",
			"draggable",
			"enctype",
			"enterkeyhint",
			"face",
			"for",
			"headers",
			"height",
			"hidden",
			"high",
			"href",
			"hreflang",
			"id",
			"inputmode",
			"integrity",
			"ismap",
			"kind",
			"label",
			"lang",
			"list",
			"loading",
			"loop",
			"low",
			"max",
			"maxlength",
			"media",
			"method",
			"min",
			"minlength",
			"multiple",
			"muted",
			"name",
			"nonce",
			"noshade",
			"novalidate",
			"nowrap",
			"open",
			"optimum",
			"pattern",
			"placeholder",
			"playsinline",
			"poster",
			"preload",
			"pubdate",
			"radiogroup",
			"readonly",
			"rel",
			"required",
			"rev",
			"reversed",
			"role",
			"rows",
			"rowspan",
			"spellcheck",
			"scope",
			"selected",
			"shape",
			"size",
			"sizes",
			"span",
			"srclang",
			"start",
			"src",
			"srcset",
			"step",
			"style",
			"summary",
			"tabindex",
			"title",
			"translate",
			"type",
			"usemap",
			"valign",
			"value",
			"width",
			"xmlns",
			"slot"
		]);
		var svg = freeze([
			"accent-height",
			"accumulate",
			"additive",
			"alignment-baseline",
			"ascent",
			"attributename",
			"attributetype",
			"azimuth",
			"basefrequency",
			"baseline-shift",
			"begin",
			"bias",
			"by",
			"class",
			"clip",
			"clippathunits",
			"clip-path",
			"clip-rule",
			"color",
			"color-interpolation",
			"color-interpolation-filters",
			"color-profile",
			"color-rendering",
			"cx",
			"cy",
			"d",
			"dx",
			"dy",
			"diffuseconstant",
			"direction",
			"display",
			"divisor",
			"dur",
			"edgemode",
			"elevation",
			"end",
			"fill",
			"fill-opacity",
			"fill-rule",
			"filter",
			"filterunits",
			"flood-color",
			"flood-opacity",
			"font-family",
			"font-size",
			"font-size-adjust",
			"font-stretch",
			"font-style",
			"font-variant",
			"font-weight",
			"fx",
			"fy",
			"g1",
			"g2",
			"glyph-name",
			"glyphref",
			"gradientunits",
			"gradienttransform",
			"height",
			"href",
			"id",
			"image-rendering",
			"in",
			"in2",
			"k",
			"k1",
			"k2",
			"k3",
			"k4",
			"kerning",
			"keypoints",
			"keysplines",
			"keytimes",
			"lang",
			"lengthadjust",
			"letter-spacing",
			"kernelmatrix",
			"kernelunitlength",
			"lighting-color",
			"local",
			"marker-end",
			"marker-mid",
			"marker-start",
			"markerheight",
			"markerunits",
			"markerwidth",
			"maskcontentunits",
			"maskunits",
			"max",
			"mask",
			"media",
			"method",
			"mode",
			"min",
			"name",
			"numoctaves",
			"offset",
			"operator",
			"opacity",
			"order",
			"orient",
			"orientation",
			"origin",
			"overflow",
			"paint-order",
			"path",
			"pathlength",
			"patterncontentunits",
			"patterntransform",
			"patternunits",
			"points",
			"preservealpha",
			"preserveaspectratio",
			"primitiveunits",
			"r",
			"rx",
			"ry",
			"radius",
			"refx",
			"refy",
			"repeatcount",
			"repeatdur",
			"restart",
			"result",
			"rotate",
			"scale",
			"seed",
			"shape-rendering",
			"specularconstant",
			"specularexponent",
			"spreadmethod",
			"startoffset",
			"stddeviation",
			"stitchtiles",
			"stop-color",
			"stop-opacity",
			"stroke-dasharray",
			"stroke-dashoffset",
			"stroke-linecap",
			"stroke-linejoin",
			"stroke-miterlimit",
			"stroke-opacity",
			"stroke",
			"stroke-width",
			"style",
			"surfacescale",
			"systemlanguage",
			"tabindex",
			"targetx",
			"targety",
			"transform",
			"transform-origin",
			"text-anchor",
			"text-decoration",
			"text-rendering",
			"textlength",
			"type",
			"u1",
			"u2",
			"unicode",
			"values",
			"viewbox",
			"visibility",
			"version",
			"vert-adv-y",
			"vert-origin-x",
			"vert-origin-y",
			"width",
			"word-spacing",
			"wrap",
			"writing-mode",
			"xchannelselector",
			"ychannelselector",
			"x",
			"x1",
			"x2",
			"xmlns",
			"y",
			"y1",
			"y2",
			"z",
			"zoomandpan"
		]);
		var mathMl = freeze([
			"accent",
			"accentunder",
			"align",
			"bevelled",
			"close",
			"columnsalign",
			"columnlines",
			"columnspan",
			"denomalign",
			"depth",
			"dir",
			"display",
			"displaystyle",
			"encoding",
			"fence",
			"frame",
			"height",
			"href",
			"id",
			"largeop",
			"length",
			"linethickness",
			"lspace",
			"lquote",
			"mathbackground",
			"mathcolor",
			"mathsize",
			"mathvariant",
			"maxsize",
			"minsize",
			"movablelimits",
			"notation",
			"numalign",
			"open",
			"rowalign",
			"rowlines",
			"rowspacing",
			"rowspan",
			"rspace",
			"rquote",
			"scriptlevel",
			"scriptminsize",
			"scriptsizemultiplier",
			"selection",
			"separator",
			"separators",
			"stretchy",
			"subscriptshift",
			"supscriptshift",
			"symmetric",
			"voffset",
			"width",
			"xmlns"
		]);
		var xml = freeze([
			"xlink:href",
			"xml:id",
			"xlink:title",
			"xml:space",
			"xmlns:xlink"
		]);
		var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
		var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
		var TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
		var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]+$/);
		var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
		var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i);
		var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
		var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g);
		var DOCTYPE_NAME = seal(/^html$/i);
		var CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);
		var getGlobal = function getGlobal$1() {
			return typeof window === "undefined" ? null : window;
		};
		/**
		* Creates a no-op policy for internal use only.
		* Don't export this function outside this module!
		* @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
		* @param {Document} document The document object (to determine policy name suffix)
		* @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
		* are not supported).
		*/
		var _createTrustedTypesPolicy = function _createTrustedTypesPolicy$1(trustedTypes, document) {
			if (_typeof(trustedTypes) !== "object" || typeof trustedTypes.createPolicy !== "function") return null;
			var suffix = null;
			var ATTR_NAME = "data-tt-policy-suffix";
			if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) suffix = document.currentScript.getAttribute(ATTR_NAME);
			var policyName = "dompurify" + (suffix ? "#" + suffix : "");
			try {
				return trustedTypes.createPolicy(policyName, {
					createHTML: function createHTML(html$2) {
						return html$2;
					},
					createScriptURL: function createScriptURL(scriptUrl) {
						return scriptUrl;
					}
				});
			} catch (_) {
				console.warn("TrustedTypes policy " + policyName + " could not be created.");
				return null;
			}
		};
		function createDOMPurify() {
			var window$1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
			var DOMPurify = function DOMPurify$1(root) {
				return createDOMPurify(root);
			};
			/**
			* Version label, exposed for easier checks
			* if DOMPurify is up to date or not
			*/
			DOMPurify.version = "2.5.8";
			/**
			* Array of elements that DOMPurify removed during sanitation.
			* Empty if nothing was removed.
			*/
			DOMPurify.removed = [];
			if (!window$1 || !window$1.document || window$1.document.nodeType !== 9) {
				DOMPurify.isSupported = false;
				return DOMPurify;
			}
			var originalDocument = window$1.document;
			var document = window$1.document;
			var DocumentFragment = window$1.DocumentFragment, HTMLTemplateElement = window$1.HTMLTemplateElement, Node = window$1.Node, Element = window$1.Element, NodeFilter = window$1.NodeFilter, _window$NamedNodeMap = window$1.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === void 0 ? window$1.NamedNodeMap || window$1.MozNamedAttrMap : _window$NamedNodeMap, HTMLFormElement = window$1.HTMLFormElement, DOMParser = window$1.DOMParser, trustedTypes = window$1.trustedTypes;
			var ElementPrototype = Element.prototype;
			var cloneNode = lookupGetter(ElementPrototype, "cloneNode");
			var getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
			var getChildNodes = lookupGetter(ElementPrototype, "childNodes");
			var getParentNode = lookupGetter(ElementPrototype, "parentNode");
			if (typeof HTMLTemplateElement === "function") {
				var template = document.createElement("template");
				if (template.content && template.content.ownerDocument) document = template.content.ownerDocument;
			}
			var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
			var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML("") : "";
			var _document = document, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment = _document.createDocumentFragment, getElementsByTagName = _document.getElementsByTagName;
			var importNode = originalDocument.importNode;
			var documentMode = {};
			try {
				documentMode = clone(document).documentMode ? document.documentMode : {};
			} catch (_) {}
			var hooks = {};
			/**
			* Expose whether this browser supports running the full DOMPurify.
			*/
			DOMPurify.isSupported = typeof getParentNode === "function" && implementation && implementation.createHTMLDocument !== void 0 && documentMode !== 9;
			var MUSTACHE_EXPR$1 = MUSTACHE_EXPR, ERB_EXPR$1 = ERB_EXPR, TMPLIT_EXPR$1 = TMPLIT_EXPR, DATA_ATTR$1 = DATA_ATTR, ARIA_ATTR$1 = ARIA_ATTR, IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$1 = ATTR_WHITESPACE, CUSTOM_ELEMENT$1 = CUSTOM_ELEMENT;
			var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
			/**
			* We consider the elements and attributes below to be safe. Ideally
			* don't add any new ones but feel free to remove unwanted ones.
			*/
			var ALLOWED_TAGS = null;
			var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));
			var ALLOWED_ATTR = null;
			var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));
			var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
				tagNameCheck: {
					writable: true,
					configurable: false,
					enumerable: true,
					value: null
				},
				attributeNameCheck: {
					writable: true,
					configurable: false,
					enumerable: true,
					value: null
				},
				allowCustomizedBuiltInElements: {
					writable: true,
					configurable: false,
					enumerable: true,
					value: false
				}
			}));
			var FORBID_TAGS = null;
			var FORBID_ATTR = null;
			var ALLOW_ARIA_ATTR = true;
			var ALLOW_DATA_ATTR = true;
			var ALLOW_UNKNOWN_PROTOCOLS = false;
			var ALLOW_SELF_CLOSE_IN_ATTR = true;
			var SAFE_FOR_TEMPLATES = false;
			var SAFE_FOR_XML = true;
			var WHOLE_DOCUMENT = false;
			var SET_CONFIG = false;
			var FORCE_BODY = false;
			var RETURN_DOM = false;
			var RETURN_DOM_FRAGMENT = false;
			var RETURN_TRUSTED_TYPE = false;
			var SANITIZE_DOM = true;
			var SANITIZE_NAMED_PROPS = false;
			var SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
			var KEEP_CONTENT = true;
			var IN_PLACE = false;
			var USE_PROFILES = {};
			var FORBID_CONTENTS = null;
			var DEFAULT_FORBID_CONTENTS = addToSet({}, [
				"annotation-xml",
				"audio",
				"colgroup",
				"desc",
				"foreignobject",
				"head",
				"iframe",
				"math",
				"mi",
				"mn",
				"mo",
				"ms",
				"mtext",
				"noembed",
				"noframes",
				"noscript",
				"plaintext",
				"script",
				"style",
				"svg",
				"template",
				"thead",
				"title",
				"video",
				"xmp"
			]);
			var DATA_URI_TAGS = null;
			var DEFAULT_DATA_URI_TAGS = addToSet({}, [
				"audio",
				"video",
				"img",
				"source",
				"image",
				"track"
			]);
			var URI_SAFE_ATTRIBUTES = null;
			var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [
				"alt",
				"class",
				"for",
				"id",
				"label",
				"name",
				"pattern",
				"placeholder",
				"role",
				"summary",
				"title",
				"value",
				"style",
				"xmlns"
			]);
			var MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
			var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
			var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
			var NAMESPACE = HTML_NAMESPACE;
			var IS_EMPTY_INPUT = false;
			var ALLOWED_NAMESPACES = null;
			var DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [
				MATHML_NAMESPACE,
				SVG_NAMESPACE,
				HTML_NAMESPACE
			], stringToString);
			var PARSER_MEDIA_TYPE;
			var SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
			var DEFAULT_PARSER_MEDIA_TYPE = "text/html";
			var transformCaseFunc;
			var CONFIG = null;
			var formElement = document.createElement("form");
			var isRegexOrFunction = function isRegexOrFunction$1(testValue) {
				return testValue instanceof RegExp || testValue instanceof Function;
			};
			/**
			* _parseConfig
			*
			* @param  {Object} cfg optional config literal
			*/
			var _parseConfig = function _parseConfig$1(cfg) {
				if (CONFIG && CONFIG === cfg) return;
				if (!cfg || _typeof(cfg) !== "object") cfg = {};
				cfg = clone(cfg);
				PARSER_MEDIA_TYPE = SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;
				transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? stringToString : stringToLowerCase;
				ALLOWED_TAGS = "ALLOWED_TAGS" in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
				ALLOWED_ATTR = "ALLOWED_ATTR" in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
				ALLOWED_NAMESPACES = "ALLOWED_NAMESPACES" in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
				URI_SAFE_ATTRIBUTES = "ADD_URI_SAFE_ATTR" in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;
				DATA_URI_TAGS = "ADD_DATA_URI_TAGS" in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;
				FORBID_CONTENTS = "FORBID_CONTENTS" in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
				FORBID_TAGS = "FORBID_TAGS" in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
				FORBID_ATTR = "FORBID_ATTR" in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
				USE_PROFILES = "USE_PROFILES" in cfg ? cfg.USE_PROFILES : false;
				ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
				ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
				ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
				ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false;
				SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
				SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false;
				WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
				RETURN_DOM = cfg.RETURN_DOM || false;
				RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
				RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
				FORCE_BODY = cfg.FORCE_BODY || false;
				SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
				SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
				KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
				IN_PLACE = cfg.IN_PLACE || false;
				IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
				NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
				CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
				if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
				if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
				if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
				if (SAFE_FOR_TEMPLATES) ALLOW_DATA_ATTR = false;
				if (RETURN_DOM_FRAGMENT) RETURN_DOM = true;
				if (USE_PROFILES) {
					ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));
					ALLOWED_ATTR = [];
					if (USE_PROFILES.html === true) {
						addToSet(ALLOWED_TAGS, html$1);
						addToSet(ALLOWED_ATTR, html);
					}
					if (USE_PROFILES.svg === true) {
						addToSet(ALLOWED_TAGS, svg$1);
						addToSet(ALLOWED_ATTR, svg);
						addToSet(ALLOWED_ATTR, xml);
					}
					if (USE_PROFILES.svgFilters === true) {
						addToSet(ALLOWED_TAGS, svgFilters);
						addToSet(ALLOWED_ATTR, svg);
						addToSet(ALLOWED_ATTR, xml);
					}
					if (USE_PROFILES.mathMl === true) {
						addToSet(ALLOWED_TAGS, mathMl$1);
						addToSet(ALLOWED_ATTR, mathMl);
						addToSet(ALLOWED_ATTR, xml);
					}
				}
				if (cfg.ADD_TAGS) {
					if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) ALLOWED_TAGS = clone(ALLOWED_TAGS);
					addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
				}
				if (cfg.ADD_ATTR) {
					if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) ALLOWED_ATTR = clone(ALLOWED_ATTR);
					addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
				}
				if (cfg.ADD_URI_SAFE_ATTR) addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
				if (cfg.FORBID_CONTENTS) {
					if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) FORBID_CONTENTS = clone(FORBID_CONTENTS);
					addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
				}
				if (KEEP_CONTENT) ALLOWED_TAGS["#text"] = true;
				if (WHOLE_DOCUMENT) addToSet(ALLOWED_TAGS, [
					"html",
					"head",
					"body"
				]);
				if (ALLOWED_TAGS.table) {
					addToSet(ALLOWED_TAGS, ["tbody"]);
					delete FORBID_TAGS.tbody;
				}
				if (freeze) freeze(cfg);
				CONFIG = cfg;
			};
			var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [
				"mi",
				"mo",
				"mn",
				"ms",
				"mtext"
			]);
			var HTML_INTEGRATION_POINTS = addToSet({}, ["annotation-xml"]);
			var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [
				"title",
				"style",
				"font",
				"a",
				"script"
			]);
			var ALL_SVG_TAGS = addToSet({}, svg$1);
			addToSet(ALL_SVG_TAGS, svgFilters);
			addToSet(ALL_SVG_TAGS, svgDisallowed);
			var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
			addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
			/**
			*
			*
			* @param  {Element} element a DOM element whose namespace is being checked
			* @returns {boolean} Return false if the element has a
			*  namespace that a spec-compliant parser would never
			*  return. Return true otherwise.
			*/
			var _checkValidNamespace = function _checkValidNamespace$1(element) {
				var parent = getParentNode(element);
				if (!parent || !parent.tagName) parent = {
					namespaceURI: NAMESPACE,
					tagName: "template"
				};
				var tagName = stringToLowerCase(element.tagName);
				var parentTagName = stringToLowerCase(parent.tagName);
				if (!ALLOWED_NAMESPACES[element.namespaceURI]) return false;
				if (element.namespaceURI === SVG_NAMESPACE) {
					if (parent.namespaceURI === HTML_NAMESPACE) return tagName === "svg";
					if (parent.namespaceURI === MATHML_NAMESPACE) return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
					return Boolean(ALL_SVG_TAGS[tagName]);
				}
				if (element.namespaceURI === MATHML_NAMESPACE) {
					if (parent.namespaceURI === HTML_NAMESPACE) return tagName === "math";
					if (parent.namespaceURI === SVG_NAMESPACE) return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
					return Boolean(ALL_MATHML_TAGS[tagName]);
				}
				if (element.namespaceURI === HTML_NAMESPACE) {
					if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) return false;
					if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) return false;
					return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
				}
				if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && ALLOWED_NAMESPACES[element.namespaceURI]) return true;
				return false;
			};
			/**
			* _forceRemove
			*
			* @param  {Node} node a DOM node
			*/
			var _forceRemove = function _forceRemove$1(node) {
				arrayPush(DOMPurify.removed, { element: node });
				try {
					node.parentNode.removeChild(node);
				} catch (_) {
					try {
						node.outerHTML = emptyHTML;
					} catch (_$1) {
						node.remove();
					}
				}
			};
			/**
			* _removeAttribute
			*
			* @param  {String} name an Attribute name
			* @param  {Node} node a DOM node
			*/
			var _removeAttribute = function _removeAttribute$1(name, node) {
				try {
					arrayPush(DOMPurify.removed, {
						attribute: node.getAttributeNode(name),
						from: node
					});
				} catch (_) {
					arrayPush(DOMPurify.removed, {
						attribute: null,
						from: node
					});
				}
				node.removeAttribute(name);
				if (name === "is" && !ALLOWED_ATTR[name]) if (RETURN_DOM || RETURN_DOM_FRAGMENT) try {
					_forceRemove(node);
				} catch (_) {}
				else try {
					node.setAttribute(name, "");
				} catch (_) {}
			};
			/**
			* _initDocument
			*
			* @param  {String} dirty a string of dirty markup
			* @return {Document} a DOM, filled with the dirty markup
			*/
			var _initDocument = function _initDocument$1(dirty) {
				var doc;
				var leadingWhitespace;
				if (FORCE_BODY) dirty = "<remove></remove>" + dirty;
				else {
					var matches = stringMatch(dirty, /^[\r\n\t ]+/);
					leadingWhitespace = matches && matches[0];
				}
				if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && NAMESPACE === HTML_NAMESPACE) dirty = "<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>" + dirty + "</body></html>";
				var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
				if (NAMESPACE === HTML_NAMESPACE) try {
					doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
				} catch (_) {}
				if (!doc || !doc.documentElement) {
					doc = implementation.createDocument(NAMESPACE, "template", null);
					try {
						doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
					} catch (_) {}
				}
				var body = doc.body || doc.documentElement;
				if (dirty && leadingWhitespace) body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
				if (NAMESPACE === HTML_NAMESPACE) return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
				return WHOLE_DOCUMENT ? doc.documentElement : body;
			};
			/**
			* _createIterator
			*
			* @param  {Document} root document/fragment to create iterator for
			* @return {Iterator} iterator instance
			*/
			var _createIterator = function _createIterator$1(root) {
				return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null, false);
			};
			/**
			* _isClobbered
			*
			* @param  {Node} elm element to check for clobbering attacks
			* @return {Boolean} true if clobbered, false if safe
			*/
			var _isClobbered = function _isClobbered$1(elm) {
				return elm instanceof HTMLFormElement && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function" || typeof elm.hasChildNodes !== "function");
			};
			/**
			* _isNode
			*
			* @param  {Node} obj object to check whether it's a DOM node
			* @return {Boolean} true is object is a DOM node
			*/
			var _isNode = function _isNode$1(object) {
				return _typeof(Node) === "object" ? object instanceof Node : object && _typeof(object) === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string";
			};
			/**
			* _executeHook
			* Execute user configurable hooks
			*
			* @param  {String} entryPoint  Name of the hook's entry point
			* @param  {Node} currentNode node to work on with the hook
			* @param  {Object} data additional hook parameters
			*/
			var _executeHook = function _executeHook$1(entryPoint, currentNode, data) {
				if (!hooks[entryPoint]) return;
				arrayForEach(hooks[entryPoint], function(hook) {
					hook.call(DOMPurify, currentNode, data, CONFIG);
				});
			};
			/**
			* _sanitizeElements
			*
			* @protect nodeName
			* @protect textContent
			* @protect removeChild
			*
			* @param   {Node} currentNode to check for permission to exist
			* @return  {Boolean} true if node was killed, false if left alive
			*/
			var _sanitizeElements = function _sanitizeElements$1(currentNode) {
				var content;
				_executeHook("beforeSanitizeElements", currentNode, null);
				if (_isClobbered(currentNode)) {
					_forceRemove(currentNode);
					return true;
				}
				if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
					_forceRemove(currentNode);
					return true;
				}
				var tagName = transformCaseFunc(currentNode.nodeName);
				_executeHook("uponSanitizeElement", currentNode, {
					tagName,
					allowedTags: ALLOWED_TAGS
				});
				if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
					_forceRemove(currentNode);
					return true;
				}
				if (tagName === "select" && regExpTest(/<template/i, currentNode.innerHTML)) {
					_forceRemove(currentNode);
					return true;
				}
				if (currentNode.nodeType === 7) {
					_forceRemove(currentNode);
					return true;
				}
				if (SAFE_FOR_XML && currentNode.nodeType === 8 && regExpTest(/<[/\w]/g, currentNode.data)) {
					_forceRemove(currentNode);
					return true;
				}
				if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
					if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
						if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
						if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
					}
					if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
						var parentNode = getParentNode(currentNode) || currentNode.parentNode;
						var childNodes = getChildNodes(currentNode) || currentNode.childNodes;
						if (childNodes && parentNode) for (var i = childNodes.length - 1; i >= 0; --i) {
							var childClone = cloneNode(childNodes[i], true);
							childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
							parentNode.insertBefore(childClone, getNextSibling(currentNode));
						}
					}
					_forceRemove(currentNode);
					return true;
				}
				if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
					_forceRemove(currentNode);
					return true;
				}
				if ((tagName === "noscript" || tagName === "noembed" || tagName === "noframes") && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
					_forceRemove(currentNode);
					return true;
				}
				if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
					content = currentNode.textContent;
					content = stringReplace(content, MUSTACHE_EXPR$1, " ");
					content = stringReplace(content, ERB_EXPR$1, " ");
					content = stringReplace(content, TMPLIT_EXPR$1, " ");
					if (currentNode.textContent !== content) {
						arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });
						currentNode.textContent = content;
					}
				}
				_executeHook("afterSanitizeElements", currentNode, null);
				return false;
			};
			/**
			* _isValidAttribute
			*
			* @param  {string} lcTag Lowercase tag name of containing element.
			* @param  {string} lcName Lowercase attribute name.
			* @param  {string} value Attribute value.
			* @return {Boolean} Returns true if `value` is valid, otherwise false.
			*/
			var _isValidAttribute = function _isValidAttribute$1(lcTag, lcName, value) {
				if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document || value in formElement)) return false;
				if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName));
				else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName));
				else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) if (_basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value)));
				else return false;
				else if (URI_SAFE_ATTRIBUTES[lcName]);
				else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, "")));
				else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag]);
				else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, "")));
				else if (value) return false;
				return true;
			};
			/**
			* _basicCustomElementCheck
			* checks if at least one dash is included in tagName, and it's not the first char
			* for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
			* @param {string} tagName name of the tag of the node to sanitize
			*/
			var _basicCustomElementTest = function _basicCustomElementTest$1(tagName) {
				return tagName !== "annotation-xml" && stringMatch(tagName, CUSTOM_ELEMENT$1);
			};
			/**
			* _sanitizeAttributes
			*
			* @protect attributes
			* @protect nodeName
			* @protect removeAttribute
			* @protect setAttribute
			*
			* @param  {Node} currentNode to sanitize
			*/
			var _sanitizeAttributes = function _sanitizeAttributes$1(currentNode) {
				var attr;
				var value;
				var lcName;
				var l;
				_executeHook("beforeSanitizeAttributes", currentNode, null);
				var attributes = currentNode.attributes;
				if (!attributes || _isClobbered(currentNode)) return;
				var hookEvent = {
					attrName: "",
					attrValue: "",
					keepAttr: true,
					allowedAttributes: ALLOWED_ATTR
				};
				l = attributes.length;
				while (l--) {
					attr = attributes[l];
					var _attr = attr, name = _attr.name, namespaceURI = _attr.namespaceURI;
					value = name === "value" ? attr.value : stringTrim(attr.value);
					lcName = transformCaseFunc(name);
					hookEvent.attrName = lcName;
					hookEvent.attrValue = value;
					hookEvent.keepAttr = true;
					hookEvent.forceKeepAttr = void 0;
					_executeHook("uponSanitizeAttribute", currentNode, hookEvent);
					value = hookEvent.attrValue;
					if (hookEvent.forceKeepAttr) continue;
					_removeAttribute(name, currentNode);
					if (!hookEvent.keepAttr) continue;
					if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
						_removeAttribute(name, currentNode);
						continue;
					}
					if (SAFE_FOR_TEMPLATES) {
						value = stringReplace(value, MUSTACHE_EXPR$1, " ");
						value = stringReplace(value, ERB_EXPR$1, " ");
						value = stringReplace(value, TMPLIT_EXPR$1, " ");
					}
					var lcTag = transformCaseFunc(currentNode.nodeName);
					if (!_isValidAttribute(lcTag, lcName, value)) continue;
					if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
						_removeAttribute(name, currentNode);
						value = SANITIZE_NAMED_PROPS_PREFIX + value;
					}
					if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
						_removeAttribute(name, currentNode);
						continue;
					}
					if (trustedTypesPolicy && _typeof(trustedTypes) === "object" && typeof trustedTypes.getAttributeType === "function") if (namespaceURI);
					else switch (trustedTypes.getAttributeType(lcTag, lcName)) {
						case "TrustedHTML":
							value = trustedTypesPolicy.createHTML(value);
							break;
						case "TrustedScriptURL":
							value = trustedTypesPolicy.createScriptURL(value);
							break;
					}
					try {
						if (namespaceURI) currentNode.setAttributeNS(namespaceURI, name, value);
						else currentNode.setAttribute(name, value);
						if (_isClobbered(currentNode)) _forceRemove(currentNode);
						else arrayPop(DOMPurify.removed);
					} catch (_) {}
				}
				_executeHook("afterSanitizeAttributes", currentNode, null);
			};
			/**
			* _sanitizeShadowDOM
			*
			* @param  {DocumentFragment} fragment to iterate over recursively
			*/
			var _sanitizeShadowDOM = function _sanitizeShadowDOM$1(fragment) {
				var shadowNode;
				var shadowIterator = _createIterator(fragment);
				_executeHook("beforeSanitizeShadowDOM", fragment, null);
				while (shadowNode = shadowIterator.nextNode()) {
					_executeHook("uponSanitizeShadowNode", shadowNode, null);
					_sanitizeElements(shadowNode);
					_sanitizeAttributes(shadowNode);
					if (shadowNode.content instanceof DocumentFragment) _sanitizeShadowDOM$1(shadowNode.content);
				}
				_executeHook("afterSanitizeShadowDOM", fragment, null);
			};
			/**
			* Sanitize
			* Public method providing core sanitation functionality
			*
			* @param {String|Node} dirty string or DOM node
			* @param {Object} configuration object
			*/
			DOMPurify.sanitize = function(dirty) {
				var cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
				var body;
				var importedNode;
				var currentNode;
				var oldNode;
				var returnNode;
				IS_EMPTY_INPUT = !dirty;
				if (IS_EMPTY_INPUT) dirty = "<!-->";
				if (typeof dirty !== "string" && !_isNode(dirty)) if (typeof dirty.toString === "function") {
					dirty = dirty.toString();
					if (typeof dirty !== "string") throw typeErrorCreate("dirty is not a string, aborting");
				} else throw typeErrorCreate("toString is not a function");
				if (!DOMPurify.isSupported) {
					if (_typeof(window$1.toStaticHTML) === "object" || typeof window$1.toStaticHTML === "function") {
						if (typeof dirty === "string") return window$1.toStaticHTML(dirty);
						if (_isNode(dirty)) return window$1.toStaticHTML(dirty.outerHTML);
					}
					return dirty;
				}
				if (!SET_CONFIG) _parseConfig(cfg);
				DOMPurify.removed = [];
				if (typeof dirty === "string") IN_PLACE = false;
				if (IN_PLACE) {
					if (dirty.nodeName) {
						var tagName = transformCaseFunc(dirty.nodeName);
						if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
					}
				} else if (dirty instanceof Node) {
					body = _initDocument("<!---->");
					importedNode = body.ownerDocument.importNode(dirty, true);
					if (importedNode.nodeType === 1 && importedNode.nodeName === "BODY") body = importedNode;
					else if (importedNode.nodeName === "HTML") body = importedNode;
					else body.appendChild(importedNode);
				} else {
					if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && dirty.indexOf("<") === -1) return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
					body = _initDocument(dirty);
					if (!body) return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
				}
				if (body && FORCE_BODY) _forceRemove(body.firstChild);
				var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
				while (currentNode = nodeIterator.nextNode()) {
					if (currentNode.nodeType === 3 && currentNode === oldNode) continue;
					_sanitizeElements(currentNode);
					_sanitizeAttributes(currentNode);
					if (currentNode.content instanceof DocumentFragment) _sanitizeShadowDOM(currentNode.content);
					oldNode = currentNode;
				}
				oldNode = null;
				if (IN_PLACE) return dirty;
				if (RETURN_DOM) {
					if (RETURN_DOM_FRAGMENT) {
						returnNode = createDocumentFragment.call(body.ownerDocument);
						while (body.firstChild) returnNode.appendChild(body.firstChild);
					} else returnNode = body;
					if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) returnNode = importNode.call(originalDocument, returnNode, true);
					return returnNode;
				}
				var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
				if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
				if (SAFE_FOR_TEMPLATES) {
					serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, " ");
					serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, " ");
					serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR$1, " ");
				}
				return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
			};
			/**
			* Public method to set the configuration once
			* setConfig
			*
			* @param {Object} cfg configuration object
			*/
			DOMPurify.setConfig = function(cfg) {
				_parseConfig(cfg);
				SET_CONFIG = true;
			};
			/**
			* Public method to remove the configuration
			* clearConfig
			*
			*/
			DOMPurify.clearConfig = function() {
				CONFIG = null;
				SET_CONFIG = false;
			};
			/**
			* Public method to check if an attribute value is valid.
			* Uses last set config, if any. Otherwise, uses config defaults.
			* isValidAttribute
			*
			* @param  {string} tag Tag name of containing element.
			* @param  {string} attr Attribute name.
			* @param  {string} value Attribute value.
			* @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
			*/
			DOMPurify.isValidAttribute = function(tag, attr, value) {
				if (!CONFIG) _parseConfig({});
				var lcTag = transformCaseFunc(tag);
				var lcName = transformCaseFunc(attr);
				return _isValidAttribute(lcTag, lcName, value);
			};
			/**
			* AddHook
			* Public method to add DOMPurify hooks
			*
			* @param {String} entryPoint entry point for the hook to add
			* @param {Function} hookFunction function to execute
			*/
			DOMPurify.addHook = function(entryPoint, hookFunction) {
				if (typeof hookFunction !== "function") return;
				hooks[entryPoint] = hooks[entryPoint] || [];
				arrayPush(hooks[entryPoint], hookFunction);
			};
			/**
			* RemoveHook
			* Public method to remove a DOMPurify hook at a given entryPoint
			* (pops it from the stack of hooks if more are present)
			*
			* @param {String} entryPoint entry point for the hook to remove
			* @return {Function} removed(popped) hook
			*/
			DOMPurify.removeHook = function(entryPoint) {
				if (hooks[entryPoint]) return arrayPop(hooks[entryPoint]);
			};
			/**
			* RemoveHooks
			* Public method to remove all DOMPurify hooks at a given entryPoint
			*
			* @param  {String} entryPoint entry point for the hooks to remove
			*/
			DOMPurify.removeHooks = function(entryPoint) {
				if (hooks[entryPoint]) hooks[entryPoint] = [];
			};
			/**
			* RemoveAllHooks
			* Public method to remove all DOMPurify hooks
			*
			*/
			DOMPurify.removeAllHooks = function() {
				hooks = {};
			};
			return DOMPurify;
		}
		return createDOMPurify();
	}));
}) });

//#endregion
export default require_purify();

//# sourceMappingURL=purify-BDQvjdzF.js.map